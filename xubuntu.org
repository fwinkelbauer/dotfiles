#+TITLE: Xubuntu Configuration
#+STARTUP: content

* Setup

This is my setup script for Xubuntu Minimal 24.04:

#+begin_src sh
sudo apt update
sudo apt -y install flatpak
sudo apt -y install numix-gtk-theme numix-icon-theme-circle libreoffice engrampa ristretto thunar-archive-plugin
sudo apt -y install emacs git keepassxc homebank dotnet-sdk-8.0
flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
flatpak -y install flathub org.mozilla.firefox
flatpak -y install flathub org.mozilla.Thunderbird

xfconf-query -c 'xsettings' -p '/Net/ThemeName' -s 'Numix'
xfconf-query -c 'xsettings' -p '/Net/IconThemeName' -s 'Numix-Circle'
xfconf-query -c 'xfwm4' -p '/general/theme' -s 'Numix'
xfconf-query -c 'xfwm4' -p '/general/placement_ratio' -s 100
xfconf-query -c 'xfce4-keyboard-shortcuts' -p '/commands/custom/<Super>e' -s 'emacs'
xfconf-query -c 'xfce4-desktop' -p '/desktop-icons/file-icons/show-home' -s 'false'
xfconf-query -c 'xfce4-desktop' -p '/desktop-icons/file-icons/show-trash' -s 'false'
xfconf-query -c 'xfce4-desktop' -p '/desktop-icons/file-icons/show-filesystem' -s 'false'
xfconf-query -c 'xfce4-desktop' -p '/desktop-icons/file-icons/show-removable' -s 'false'
xfconf-query -c 'xfce4-screensaver' -p '/saver/idle-activation/delay' -s 15 -n -t int

sudo locale-gen 'de_DE.UTF-8'
sudo sed -i 's/enabled=1/enabled=0/g' /etc/default/apport

git clone https://github.com/fwinkelbauer/chunkyard ~/Projects/chunkyard
git clone https://github.com/fwinkelbauer/dotfiles.git ~/Projects/dotfiles
git clone https://github.com/fwinkelbauer/fwinkelbauer.github.io.git ~/Projects/website

emacs -Q --batch -l org --eval '(org-babel-tangle-file "~/Projects/dotfiles/xubuntu.org")'

. ~/.profile
my-copy
my-restore
#+end_src


* Configuration
:PROPERTIES:
:header-args: :mkdirp yes
:END:

** Desktop

Define default applications:

#+begin_src conf :tangle "~/.config/mimeapps.list"
[Default Applications]
text/plain=emacs.desktop
application/pdf=org.mozilla.firefox.desktop
#+end_src

Setup web browser and mail reader:

#+begin_src fundamental :tangle "~/.config/xfce4/helpers.rc"
WebBrowser=custom-WebBrowser
MailReader=custom-MailReader
#+end_src

#+begin_src conf :tangle "~/.local/share/xfce4/helpers/custom-WebBrowser.desktop"
[Desktop Entry]
NoDisplay=true
Version=1.0
Encoding=UTF-8
Type=X-XFCE-Helper
X-XFCE-Category=WebBrowser
X-XFCE-CommandsWithParameter=flatpak run org.mozilla.firefox "%s"
Icon=flatpak
Name=flatpak
X-XFCE-Commands=flatpak run org.mozilla.firefox
#+end_src

#+begin_src conf :tangle "~/.local/share/xfce4/helpers/custom-MailReader.desktop"
[Desktop Entry]
NoDisplay=true
Version=1.0
Encoding=UTF-8
Type=X-XFCE-Helper
X-XFCE-Category=MailReader
X-XFCE-CommandsWithParameter=flatpak run org.mozilla.Thunderbird "%s"
Icon=flatpak
Name=flatpak
X-XFCE-Commands=flatpak run org.mozilla.Thunderbird
#+end_src

** Git

#+begin_src conf :tangle "~/.config/git/config"
[user]
  email = mail@florianwinkelbauer.com
  name = Florian Winkelbauer
  signingKey = ~/.ssh/git-commit.ed25519.pub

[gpg]
  format = ssh

[init]
  defaultBranch = main

[status]
  showUntrackedFiles = all

[commit]
  gpgSign = true

[tag]
  gpgSign = true

[fetch]
  prune = true

[push]
  followTags = true

[merge]
  ff = only
  conflictStyle = zdiff3

[log]
  date = iso

[url "git@github.com:fwinkelbauer/"]
  insteadOf = "https://github.com/fwinkelbauer/"
#+end_src


* Scripts
:PROPERTIES:
:header-args: :mkdirp yes
:END:

** Chunkyard

A utility script for other scripts:

#+begin_src sh :tangle "~/.local/bin/my-chunkyard" :shebang "#!/bin/bash -eu"
chunkyard "$@" --prompt 'Libsecret' --repository ~/.chunkyard
#+end_src

Create a new backup:

#+begin_src sh :tangle "~/.local/bin/my-store" :shebang "#!/bin/bash -eu"
local=~/.chunkyard

paths=(
    ~/.local/share/fonts
    ~/.ssh
    ~/Documents
    ~/Music
    ~/Pictures
    ~/Videos
)

includes=(
    '!\~$'
    '!\.uuid$'
    '!authorized_keys$'
)

my-chunkyard store --paths "${paths[@]}" --includes "${includes[@]}" "$@"
#+end_src

Restore the latest backup:

#+begin_src sh :tangle "~/.local/bin/my-restore" :shebang "#!/bin/bash -eu"
local=~/.chunkyard

my-chunkyard restore --directory ~/ "$@"

chmod 700 ~/.ssh
chmod 600 ~/.ssh/*
#+end_src

Copy local backup data from/to external devices:

#+begin_src sh :tangle "~/.local/bin/my-copy" :shebang "#!/bin/bash -eu"
local=~/.chunkyard

remotes=(
    /media/florian/Backup1/Florian/main.chunkyard
    /media/florian/Backup2/Florian/main.chunkyard
    /media/florian/DORA1/main.chunkyard
)

for remote in "${remotes[@]}"; do
    if ! [ -d "$remote" ]; then
        continue
    fi

    if ! [ -x "$(command -v chunkyard)" ]; then
        cp "$remote/chunkyard" ~/.local/bin/
        chmod +x ~/.local/bin/chunkyard
    fi

    echo "Pushing to: $remote"
    chunkyard copy --repository "$local" --destination "$remote" --prompt 'Libsecret' --last 20

    echo "Pulling from: $remote"
    chunkyard copy --repository "$remote" --destination "$local" --prompt 'Libsecret' --last 20
done
#+end_src

** Homebank

A script to turn my bank statements into csv files that I can import into
Homebank:

#+begin_src sh :tangle "~/.local/bin/my-homebank" :shebang "#!/bin/bash -eu"
homebank ~/Documents/finance.xhb &

input=$(find ~/Downloads -name 'meinElba*.csv')
output=~/Downloads/homebank.csv

awk '{ FS=";"; gsub("\"", ""); print $1 ";8;;;" $2 ";" $4 ";;" }' "$input" > "$output"
rm "$input"
read -rp "Press Enter to delete $output: "
rm "$output"
#+end_src

** Updates

A script to update my system:

#+begin_src sh :tangle "~/.local/bin/my-upgrade" :shebang "#!/bin/bash -eu"
echo 'apt'
echo '========================================'
sudo apt update
sudo apt upgrade -y
sudo apt auto-remove -y
echo 'flatpak'
echo '========================================'
flatpak update -y
#+end_src


* Emacs
:PROPERTIES:
:header-args: :mkdirp yes :tangle "~/.config/emacs/init.el"
:END:

** Package Manager

Make sure that we are running a newer version of Emacs:

#+begin_src emacs-lisp
(when (version< emacs-version "29.1")
  (error "Unsupported version of Emacs"))
#+end_src

Setup the package manager:

#+begin_src emacs-lisp
(require 'package)
(require 'use-package-ensure)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

(package-initialize)

(setq package-selected-packages '(embark-consult embark consult vertico orderless company magit color-theme-sanityinc-tomorrow)
      use-package-always-ensure t)
#+end_src

** General

#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t
      gc-cons-threshold (* 128 1024 1024)
      use-short-answers t
      backup-inhibited t
      auto-save-default nil
      create-lockfiles nil
      visible-bell t
      inhibit-startup-message t
      initial-scratch-message nil
      column-number-mode t
      sentence-end-double-space nil
      require-final-newline t)

(setq-default fill-column 80
              indent-tabs-mode nil)

(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(pixel-scroll-precision-mode)
(tool-bar-mode 0)
(set-face-attribute 'default nil :family "JetBrains Mono" :foundry "JB" :slant 'normal :weight 'medium :height 120 :width 'normal)
(global-auto-revert-mode t)
(delete-selection-mode t)
(add-hook 'before-save-hook #'delete-trailing-whitespace)
(show-paren-mode t)

(setq-default mode-line-format
              '("%e" mode-line-front-space
                (:propertize
                 ("" mode-line-mule-info mode-line-client mode-line-modified
                  mode-line-remote)
                 display (min-width (5.0)))
                mode-line-frame-identification mode-line-buffer-identification
                "  %l:%c  " mode-line-modes
                mode-line-misc-info mode-line-end-spaces))
#+end_src

** Dired

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook #'dired-hide-details-mode)

(setq dired-auto-revert-buffer t
      dired-dwim-target t
      dired-listing-switches "-alhv --time-style=+%Y-%m-%d --group-directories-first")

(defun fw/dired-archive ()
  "Open dired for ~/Downloads and ~/Documents/archive"
  (interactive)
  (delete-other-windows)
  (dired "~/Downloads")
  (fw/split-window-horizontally)
  (dired "~/Documents/archive"))
#+end_src

** Org

#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-directory "~/Documents/org/"
        org-default-notes-file (concat org-directory "inbox.org")
        org-agenda-files (list org-directory)
        org-edit-src-content-indentation 0)

  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))

  (setq org-capture-bookmark nil
        org-capture-templates '(("i" "Inbox" entry (file org-default-notes-file)
                                 "* %?" :empty-lines-before 1)))

  (defun fw/org-capture-inbox ()
    "Opens the `org-capture' inbox template."
    (interactive)
    (org-capture nil "i"))

  (setq org-agenda-custom-commands
        '(("." "Overview"
           ((agenda ""
                    ((org-agenda-overriding-header "Kalender\n")
                     (org-agenda-prefix-format "%-11c%?-12t")
                     (org-agenda-time-grid '((daily today require-timed)
                                             (800 1000 1200 1400 1600 1800 2000)
                                             " ....."
                                             "----------------"))
                     (org-agenda-time-leading-zero t)
                     (org-agenda-show-future-repeats nil)
                     (org-agenda-current-time-string "<<<<<<<<<<<<<<<<")
                     (org-agenda-scheduled-leaders '("" ""))
                     (org-agenda-skip-deadline-prewarning-if-scheduled t)))
            (todo ""
                  ((org-agenda-overriding-header "\nSonstiges\n")
                   (org-agenda-block-separator nil)
                   (org-agenda-prefix-format "%-11c%?-12t")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   (org-agenda-todo-ignore-deadlines 'all)
                   (org-agenda-todo-ignore-scheduled 'all)))))))

  (defun fw/org-overview ()
    "Show my inbox and custom org-agenda."
    (interactive)
    (delete-other-windows)
    (find-file org-default-notes-file)
    (org-agenda nil "."))

  (defun fw/org-icalendar-export ()
    "Export current buffer to an iCalendar file in ~/Downloads/"
    (let ((icalendar-export-sexp-enumeration-days 365))
      (rename-file (org-icalendar-export-to-ics)
                   "~/Downloads/"
                   t))))
#+end_src

The calendar should use my native language and know about my holidays:

#+begin_src emacs-lisp
(set-locale-environment "de_DE.UTF-8")

(setq calendar-week-start-day 1
      calendar-day-header-array ["So" "Mo" "Di" "Mi" "Do" "Fr" "Sa"]
      calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                               "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array ["Jänner" "Februar" "März" "April"
                                 "Mai" "Juni" "Juli" "August"
                                 "September" "Oktober" "November" "Dezember"])

(setq parse-time-weekdays '(("so" . 0) ("mo" . 1) ("di" . 2) ("mi" . 3)
                            ("do" . 4) ("fr" . 5) ("sa" . 6)))

(setq calendar-holidays '((holiday-fixed 1 1 "Neujahr (frei)")
                          (holiday-fixed 1 6 "Heilige Drei Könige (frei)")
                          (holiday-fixed 2 14 "Valentinstag")
                          (holiday-easter-etc 1 "Ostermontag (frei)")
                          (holiday-easter-etc -46 "Aschermittwoch")
                          (holiday-easter-etc -2 "Karfreitag")
                          (holiday-fixed 5 1 "Österreichischer Staatsfeiertag (frei)")
                          (holiday-easter-etc 39 "Christi Himmelfahrt (frei)")
                          (holiday-easter-etc 50 "Pfingstmontag (frei)")
                          (holiday-easter-etc 60 "Fronleichnam (frei)")
                          (holiday-float 5 0 2 "Muttertag")
                          (holiday-float 6 0 2 "Vatertag")
                          (holiday-fixed 8 15 "Mariä Himmelfahrt (frei)")
                          (holiday-fixed 10 26 "Nationalfeiertag (frei)")
                          (holiday-fixed 11 1 "Allerheiligen (frei)")
                          (holiday-fixed 12 8 "Maria Empfängnis (frei)")
                          (holiday-fixed 12 24 "Heiliger Abend")
                          (holiday-fixed 12 25 "Erster Weihnachtstag (frei)")
                          (holiday-fixed 12 26 "Zweiter Weihnachtstag (frei)")))
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :config
  (load-theme 'sanityinc-tomorrow-night t)
  (set-face-attribute 'org-agenda-structure nil :height 1.25)
  (set-face-attribute 'org-agenda-date-today nil :slant 'normal :underline t))
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit
  :config
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1
        magit-save-repository-buffers 'dontask
        magit-repository-directories '(("~/Projects" . 1))))
#+end_src

** Vertico & Orderless

#+begin_src emacs-lisp
(use-package vertico
  :config
  (vertico-mode)
  (keymap-set vertico-map "DEL" #'vertico-directory-delete-char))

(use-package orderless
  :config
  (setq completion-styles '(orderless basic)
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Embark & Consult

#+begin_src emacs-lisp
(use-package embark
  :config
  (setq prefix-help-command #'embark-prefix-help-command)
  (keymap-global-set "<remap> <describe-bindings>" #'embark-bindings))

(use-package consult
  :config
  (defun fw/find-file ()
    "Find files in current project or directory."
    (interactive)
    (if (project-current)
        (project-find-file)
      (consult-find)))

  (defun fw/grep ()
    "Run grep in current project or directory."
    (interactive)
    (if (project-current)
        (consult-git-grep)
      (consult-grep))))

(use-package embark-consult)
#+end_src

** Company

#+begin_src emacs-lisp
(use-package company
  :config
  (setq company-dabbrev-downcase nil
        company-dabbrev-ignore-case nil)
  (global-company-mode t))
#+end_src

** Keybindings

#+begin_src emacs-lisp
(defun fw/split-window-vertically ()
  "Split the selected window into two vertical windows."
  (interactive)
  (split-window-vertically)
  (other-window 1))

(defun fw/split-window-horizontally ()
  "Split the selected window into two horizontal windows."
  (interactive)
  (split-window-horizontally)
  (other-window 1))

(define-prefix-command 'fw/project-map)
(define-prefix-command 'fw/org-map)
(define-prefix-command 'fw/x-map)

(bind-keys :map fw/project-map
           ("f" . fw/find-file)
           ("s" . fw/grep)
           ("d" . magit-file-dispatch)
           ("g" . magit-status))

(bind-keys :map fw/org-map
           ("c" . fw/org-overview)
           ("i" . fw/org-capture-inbox)
           ("l" . org-insert-link)
           ("t" . org-todo)
           ("s" . org-schedule)
           ("d" . org-deadline)
           ("." . org-time-stamp)
           (":" . org-time-stamp-inactive)
           ("m" . org-insert-structure-template)
           ("b" . org-babel-tangle))

(bind-keys :map fw/x-map
           ("s" . save-buffer)
           ("c" . save-buffers-kill-terminal))

(bind-keys :prefix "<menu>"
           :prefix-map fw/main-map
           ("RET" . embark-act)
           ("a" . fw/dired-archive)
           ("f" . find-file)
           ("s" . consult-line)
           ("q" . query-replace)
           ("l" . consult-goto-line)
           ("k" . kill-this-buffer)
           ("b" . consult-buffer)
           ("h" . mark-whole-buffer)
           ("0" . delete-window)
           ("1" . delete-other-windows)
           ("2" . fw/split-window-vertically)
           ("3" . fw/split-window-horizontally)
           ("o" . other-window)
           ("." . highlight-symbol-at-point)
           ("r" . highlight-regexp)
           ("u" . unhighlight-regexp)
           ("SPC" . rectangle-mark-mode)
           ("t" . string-rectangle)
           ("d" . delete-rectangle)
           ("?" . count-words-region)
           ("g" . fw/project-map)
           ("c" . fw/org-map)
           ("x" . fw/x-map))

(bind-key* "C-z" 'undo)
(unbind-key "C-x C-s")
(unbind-key "C-x C-c")
#+end_src
